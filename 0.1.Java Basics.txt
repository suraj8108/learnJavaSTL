JVM:
	-> JVM (Java Virtual Machine) is an abstract machine that enables your computer to run a Java program.
	-> Then, the JVM translates bytecode into native machine code (set of instructions that a computer's CPU executes directly).

JRE:
	-> JRE (Java Runtime Environment) is a software package that provides Java class libraries, Java Virtual Machine (JVM), and other components that are 	   required to run Java applications.
	-> JRE is the superset of JVM.

JDK:
	-> JDK (Java Development Kit) is a software development kit required to develop applications in Java. When you download JDK, JRE is also downloaded 
	   with it.
	-> In addition to JRE, JDK also contains a number of development tools (compilers, JavaDoc, Java Debugger, etc).

Java Variables:
	Java is case sensitive
	Variables must start with either a letter or an underscore, or a dollar. Cant start with the number.

4 types of Variables:
	1) Instance Variable(Non Static Field)
	2) Class Variable (Static Field)
	3) Local Variables
	4) Parameters

Data Types:
	Java is a statically-typed language. This means that all variables must be declared before they can be used.
	1) boolean		default value = false
	2) byte			1 byte(-128 to 127) default value = 0
	3) short		2 byte default value = 0
	4) int 			4 byte default value = 0
	5) long			8 byte default value = 0
	6) double		8 byte default value = 0.0(0.0d)
	7) float		4 byte defaule value = 0.0(0.0f)
	8) char 		2 byte Unicode character Default value: '\u0000'
	9) String 		It is not premitive type. It is an object

Operators in Java 
	Arithmetic Operator
	Assignment Operator
	Relational Operator
	Logical Operator
	Unary Operator
	Bitwise Operator

Input in Java
	Scanner Class
		Functions = nextInt(), nextLong(), nextFloat(), nextDouble(), and next()
		close() to close the input scanner object

Java for Each:
	In Java, the for-each loop is used to iterate through elements of arrays and collections (like ArrayList). It is also known as the enhanced for loop.

break in java:
	break in a loop
	break inside nested loop
	Labled break statement

continue in java:
	continue in loop	
	continue inside nested loop
	labeled continue statement

Arrays in Java:
	Declare a variable:
		dataType[] arrayName;		dataType -> Primitive Data Type
		Eg: double[] data = new double[10]
		   double[] salary = {12.0, 12.9} 
	
	Multidimensional Array:
		double[][] matrix = { 
						{1.2, 1.1}, {2.4, 5.3}
					  }
		double[][] data = new double[2][3];
		
	Copy Arrays:
		Convert Array To String => Arrays.toString(arr)	
		
		Copy Can be done in following ways:
			1) One by one loop all elements and store in a new variable
			2) Copy by refrence that is arr1 = arr2. Changes in arr1 will make automatic changes in arr2
			3) System.arrayCopy(src, srcPos, dest, destPos, length);
				src - source array you want to copy
				srcPos - starting position (index) in the source array
				dest - destination array where elements will be copied from the source
				destPos - starting position (index) in the destination array
				length - number of elements to copy
			4) Arrays.copyOfRange(src, srcPos, length)
				Eg: int[] destination1 = Arrays.copyOfRange(source, 0, source.length);


---------------------------------------------------------------------------------------------
Java OOPS
---------------------------------------------------------------------------------------------

 * Encapsulation	* Inheritance	* Polymorphism		* Abstraction

Class and objects
Class -> (state or fields) and (methods or behaviour)

Method in Java
Method Overloading in Java:
	-> Different number of parameters, different data types of parameters, or both
	-> It is not method overloading if we only change the return type of methods. There must be differences in the number of parameters.

Constructor in Java:
	If we make a constructor as private the object of that class can't be created outside the class. Object needs to be created within the class.

	1) No-Arg Constructor
	2) Parameterized Constructor
	3) Default Constructor -> Java compiler creates this construtor if we dont create any constructor.

	Constructors are invoked implicitly when you instantiate objects.
	The two rules for creating a constructor are:
		-> The name of the constructor should be the same as the class.
		-> A Java constructor must not have a return type.
	
	If a class doesn't have a constructor, the Java compiler automatically creates a default constructor during run-time . 
	The default constructor initializes instance variables with default values. For example, the int variable will be initialized to 0

	Constructor types:
		No-Arg Constructor - a constructor that does not accept any arguments
		Parameterized constructor - a constructor that accepts arguments
		Default Constructor - a constructor that is automatically created by the Java compiler if it is not explicitly defined.
	A constructor cannot be abstract or static or final.
	A constructor can be overloaded but can not be overridden.

Java String:
	String is a sequence of the characters.
	str.length()										-> Get Length of the String
	String joinedString = first.concat(second) 			-> Concat a String
	boolean result1 = first.equals(second)				-> Check if the strings are equal
	String example = "This is the \"String\" class."	-> Escape Characters
	
	Java Strings are immutable. Whenever we assign a new value it creates a new String and then refrence the variable to the new String.
	https://www.programiz.com/java-programming/string
	
Methods of String:
	contains()
	substring()				returns the substring of the string
	replace()				replaces the specified old character with the specified new character
	replaceAll()			replaces all substrings matching the regex pattern
	replaceFirst()			replace the first matching substring
	charAt()				returns the character present in the specified location
	indexOf()				returns the position of the specified character in the string
	toCharArray()			converts the string to a char array

	
Difference between String == and equals() Method:
	== checks the refrence of the two variable
	== checks if the reference to string objects are equal or not.
	Eg:
		String val1 = "Suraj";
		String val2 = val1;
		boolean res = (val1 == val2) 	// true
	equals() checks if the content of the string object are equal.

Access Modifiers:
	Public					declarations are visible everywhere
	Protected				declarations are visible within the package or all subclasses
	Default					declarations are visible only within the package (package private)
	Private					declarations are visible within the class only
	

this keyword in Java:
	In Java, this keyword is used to refer to the current object inside a method or a constructor.
	We can use this keyword to pass the current object as an argument to a method.

final keyword in java:
	In Java, the final keyword is used to denote constants. It can be used with variables, methods, and classes.
	Once any entity (variable, method or class) is declared final, it can be assigned only once. That is,
		the final variable cannot be reinitialized with another value
		the final method cannot be overridden
		the final class cannot be extended

java instanceOf operator:
	The instanceof operator in Java is used to check whether an object is an instance of a particular class or not.
	We can use the instanceof operator to check if objects of the subclass is also an instance of the superclass.
	The instanceof operator is also used to check whether an object of a class is also an instance of the interface implemented by the class. 
	

Java Inheritance(is a relationship):
	
	Inheritance
		-> super keyword is used to call the method of the parent class from the method of the child class.
		-> The parent class should have the No-arg contructor as it is being bydefault called from the child class constructor.
		-> Supported Inheritance	
			1. Single Inheritance	2. Multilevel Inheritance	3. Hierarchical Inheritance	4. Hybrid Inheritance (Two or more types of Inheritance)
		-> Unsupported: 
			1. Multiple Inheritance

	Importance of Inheritance:
		-> The most important use of inheritance in Java is code reusability. The code that is present in the parent class can be directly used by the child class.
		-> Method overriding is also known as runtime polymorphism. Hence, we can achieve Polymorphism in Java with the help of inheritance.
	
	Method Overriding:
		-> In Java, annotations are the metadata that we used to provide information to the compiler. 
		-> The @Override annotation specifies the compiler that the method after this annotation overrides the method of the superclass.
		Rules:
			=> Both the superclass and the subclass must have the same method name, the same return type and the same parameter list.
			=> We cannot override the method declared as final and static
			=> We should always override abstract methods of the superclass
		It is important to note that constructors in Java are not inherited. Hence, there is no such thing as constructor overriding in Java.
	
	Access Specifiers in Method Overriding:
		-> The same method declared in the superclass and its subclasses can have different access specifiers. However, there is a restriction.
		-> We can only use those access specifiers in subclasses that provide larger access than the access specifier of the superclass.
	
	However, using super() is not compulsory inside the child class constructor. 
	Even if super() is not used in the subclass constructor, the compiler implicitly calls the default constructor of the superclass.
	
Abstract Class:
	The abstract class in Java cannot be instantiated (we cannot create objects of abstract classes).
	An abstract class can have both the regular methods and abstract methods.
	
Abstract Method:
	A method that doesn't have its body is known as an abstract method. We use the same abstract keyword to create abstract methods.
	Eg:	abstract void display();
	
	Implementing Abstract Method:
		-> If the abstract class includes any abstract method, then all the child classes inherited from the abstract superclass must provide the 
			implementation of the abstract method.
		-> One abstract class inherits another abstract class in that case it is not required to implement the parent class abstract methods

Accesses Constructor of Abstract Classes:
	An abstract class can have constructors like the regular class. And, we can access the constructor of an abstract class from the subclass using the 
	super keyword.

Abstraction in Java:
	-> Abstraction is an important concept of object-oriented programming that allows us to hide unnecessary details and only show the needed information.
	-> A practical example of abstraction can be motorbike brakes. We know what brake does. When we apply the brake, the motorbike will stop. 
		However, the working of the brake is kept hidden from us.
	-> The major advantage of hiding the working of the brake is that now the manufacturer can implement brake differently for different motorbikes, 
		however, what brake does will be the same.
		
	https://www.programiz.com/java-programming/abstract-classes-methods

KEY POINTS OF ABSTRACT:
	=> We use the abstract keyword to create abstract classes and methods.
	=> An abstract method doesn't have any implementation (method body).
	=> A class containing abstract methods should also be abstract.
	=> We cannot create objects of an abstract class.
	=> To implement features of an abstract class, we inherit subclasses from it and create objects of the subclass.
	=> A subclass must override all abstract methods of an abstract class. However, if the subclass is declared abstract, it's not mandatory to override 		   abstract methods.
	=> We can access the static attributes and methods of an abstract class using the reference of the abstract class. 
		For example: Animal.staticMethod();

Java Interfaces:
	* An interface is a fully abstract class. It includes a group of abstract methods (methods without a body).
	* In Interface 
		~ All the methods are implicitly "public".
		~ All fields are implicitly "public", "static" and "final" because we need to keep the value same for all the implementation.
	* Like abstract classes, we cannot create objects of interfaces.
	
Advantages of Interfaces in Java:
	* Similar to abstract classes, interfaces help us to achieve abstraction in Java.
	* Interfaces provide specifications that a class (which implements it) must follow.
	* Interfaces are also used to achieve multiple inheritance in Java.
	
default methods in java:
	* With the release of Java 8, we can now add methods with implementation inside an interface. These methods are called default methods.
	* To declare default methods inside interfaces, we use the default keyword. For example,
		default void getSides() {
   			// body of getSides()
		}

private and static Methods in Interface:
	* The Java 8 also added another feature to include static methods inside an interface.
	* With the release of Java 9, private methods are also supported in interfaces.
	  We cannot create objects of an interface. Hence, private methods are used as helper methods that provide support to other methods in interfaces.	
	Eg: https://www.programiz.com/java-programming/interfaces


Java Polymorphism:
	~>Achieve polymorphism via different ways:
		Method Overriding
		Method Overloading
		Operator Overloading
			=> Some operators in Java behave differently with different operands.
			=> + operator is overloaded to perform numeric addition as well as string concatenation
			=> operators like &, |, and ! are overloaded for logical and bitwise operations.


Java Nested and Inner Class:
	=> Types of nested Class:
		-> Non-static nested class (inner class)
		-> Static nested class
			~> In Java, only nested classes are allowed to be static.

Static Nested Class:
	=> Java treats the inner class as a regular member of a class. They are just like methods and variables declared inside a class.
	=> Since inner classes are members of the outer class, you can apply any access modifiers like private, protected to your inner class 
		which is not possible in normal classes.
	=> Since the nested class is a member of its enclosing outer class, you can use the dot (.) notation to access the nested class and its members.
	=> Non-static nested classes (inner classes) have access to other members of the outer/enclosing class, even if they are declared private.

Java Anonymous Class:
	=> In Java, a class can contain another class known as nested class. It's possible to create a nested class without giving any name.
	=> A nested class that doesn't have any name is known as an anonymous class.
	
	class outerClass {

 	   // defining anonymous class
    		object1 = new Type(parameterList) {
         		// body of the anonymous class
    		};
	}
	
	Anonymous classes usually extend subclasses or implement interfaces.
	Here, Type can be
		1) a superclass that an anonymous class extends
		2) an interface that an anonymous class implements
	
Advantages of Anonymous Class:
	1) In anonymous classes, objects are created whenever they are required. That is, objects are created to perform some specific tasks

Java Singleton Class:
	-> In Java, Singleton is a design pattern that ensures that a class can only have one object.
	-> Used generally for the database access.
	
	To create a singleton class, a class must implement the following properties:
		1) Create a private constructor of the class to restrict object creation outside of the class.
		2) Create a private attribute of the class type that refers to the single object.
		3) Create a public static method that allows us to create and access the object we created. Inside the method, we will create a condition 
			that restricts us from creating more than one object.

ENUMS in Java:
	In Java, an enum (short for enumeration) is a type that has a fixed set of constant values.
	The enum constants are usually represented in uppercase.
	
	Methods of Java Enum Class:
		ordinal(), compareTo(), toString(),  valueOf(), values()

	Enum Contructor:
		
----------------
Java Exceptions:
----------------
					Throwable
					   | 
			-------------------------------------
			|						|
		    Error					   Exception
									|
							-----------------------	
							|			    |
						Runtime Exception		IO Exception

-> Errors represent irrecoverable conditions such as Java virtual machine (JVM) running out of memory, memory leaks, stack overflow errors, 
	library incompatibility, infinite recursion, etc.
-> Exceptions can be handeled by the program. 
-> When an exception occurs within a method, it creates an object. This object is called the exception object.

-> Runtime Exception:
	~> Programming Error
	~> Unchecked Exception
	~> Eg: ArithmeticException, ArrayIndexOutOfBoundsException, NullPointerException
-> IO Exception:
	~> IO Exception
	~> Checked at compile time
	~> Need to be handeled
	~> Eg: FileNotFoundException

	
------------------
Exception Handling
------------------
try..catch, finally, throw and throws

 In Java, we can use a try block without a catch block. However, we cannot use a catch block without a try block.

throw: 
	The Java throw keyword is used to explicitly throw a single exception.
throws:
	the throws keyword is used to declare the type of exceptions that might occur within the method. It is used in the method declaration.

	
* Cases in which finally block does not execute:
	~> Use of System.exit() method
	~> An exception occurs in the finally block
	~> The death of a thread

* In Java SE 7 and later, we can now catch more than one type of exception in a single catch block.
* Each exception type that can be handled by the catch block is separated using a vertical bar or pipe |.


=> catch (Exception | ArithmeticException | ArrayIndexOutOfBoundsException e) {
      System.out.println(e.getMessage());
    }
=> ArithmeticException and ArrayIndexOutOfBoundsException are both subclasses of the Exception class. So, we get a compilation error.

=> Java try-with-resources:
	~> The try-with-resources statement automatically closes all the resources at the end of the statement. A resource is an object to be 
	   closed at the end of the program.
=> try-with-resources with multiple resources:
	~> We can declare more than one resource in the try-with-resources statement by separating them with a semicolon ;
=> Java 9 try-with-resources enhancement:
	~> In Java 7, there is a restriction to the try-with-resources statement. The resource needs to be declared locally within its block.
	~> Java 9 overcomed this restriction.

----------------
Java Annotations	
----------------
-> Java annotations are metadata (data about data) for our program source code.
-> @Override, @SuppressWarnings, @NonNull

-------------
SOLID Principles
-------------

The SOLID principles are a set of five design principles in object-oriented programming that help create more understandable, flexible, and 
maintainable software. 
These principles were introduced by Robert C. Martin, also known as Uncle Bob. Here's a brief overview of each principle:

1. Single Responsibility Principle (SRP):
   - Definition: A class should have only one reason to change, meaning it should have only one job or responsibility.
   - Example: A class that handles user authentication should not also handle logging user activities. These should be separate classes.

2. Open-Closed Principle (OCP):
   - Definition: Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
   - Example: Instead of modifying existing code to add new features, you should extend the code by adding new classes or methods.

3. Liskov Substitution Principle (LSP):
   - Definition: Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.
   - Example: If a function works with a base class object, it should also work with any derived class object without any issues.

4. Interface Segregation Principle (ISP):
   - Definition: Clients should not be forced to depend on interfaces they do not use. Instead of one large interface, create smaller, more specific interfaces.
   - Example: Instead of having a single interface for all operations, split it into multiple interfaces, each serving a specific purpose.

5. Dependency Inversion Principle (DIP):
   - Definition: High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.
   - Example: Use interfaces or abstract classes to decouple high-level and low-level modules, making the system more flexible and easier to maintain¹(https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/)²(https://en.wikipedia.org/wiki/SOLID).

These principles aim to improve code quality and make it easier to manage and extend over time. Would you like to dive deeper into any specific principle or see some code examples?

(https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/): 
(https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/)
































